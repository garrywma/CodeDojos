@page "/chessgame"
@rendermode InteractiveWebAssembly

<h3>@Label</h3>
<Chessboard @ref="chessboard" Game="@game"/>
<button @onclick="PlayLiChessGames">Play LiChess Games</button>
<div>@Message</div>
@code {
    public string Label { get; set; } = "Chess Game";
    public string Message { get; set; } = "";


    private Chessboard? chessboard;
    Game game = new();
    private async void PlayLiChessGames()
    {
        bool white = true;
        int moveIndex = 0;
        int whiteIndex = 0;
        int blackIndex = 0;
        bool invalid = false;
        int pauseAt = 80;

        int gameIndex = 0;
        foreach (GameRecord gameRecord in GameLibrary.MagnusCarlsenGames)
        {
            game = new Game();
            white = true;

            string gameName = gameRecord.Name;
            string[] moves = gameRecord.MovesAsAlgebra;

            while (moveIndex < moves.Length && !invalid)
            {
                string algebra = moves[moveIndex++];
                Label = $"{gameName} {moveIndex + 1} of {moves.Length + 1} {algebra}";
                whiteIndex += white ? 1 : 0;
                blackIndex += white ? 0 : 1;
                try
                {
                    Colour whoseTurn = white ? Colour.White : Colour.Black;
                    // TODO: move to Game.PlayRecordedGame
                    //Move move = Algebra.DecodeAlgebra(algebra, game.Board, whoseTurn);
                    //game.Move(algebra, whoseTurn);
                    Move moveHistory = game.HistoryFor(Colour.White, 0);
                    white = !white;
                }
                catch (Exception ex)
                {
                    invalid = true;
                    Message = $"{ex.Message}";
                }
                StateHasChanged();
                await Task.Delay(1);
             }

            //TODO: Handle pause between games
     
            moveIndex = 0;
        }

    }
}
