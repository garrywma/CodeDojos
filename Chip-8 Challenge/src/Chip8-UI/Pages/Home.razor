@page "/"
@using System.Reflection.Emit
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using CHIP_8_Virtual_Machine
@using Chip8_UI.Components
@inject IJSRuntime JS
@inject HttpClient Http

<div tabindex="0" @ref="_keyDownDiv" @onkeydown="KeyDown" @onkeyup="KeyUp" @onkeypress="KeyPress">
    <BECanvas @ref="_canvas" Width="640" Height="320"/>
    <p>@KeypadState</p>
    <Beeper @ref="_beeper"/>
</div>

@code {
     private VM _vm;
    private Keypad _keypad;
    private Beeper _beeper;
    private ElementReference _keyDownDiv;
    private BECanvasComponent _canvas;
    private Canvas2DContext _2dContext;

    public string KeypadState => _keypad.ToString();

    protected override void OnInitialized()
    {
        _vm = new VM();
        _keypad = _vm.Keypad;
        _vm.Display.OnSpriteDisplayed += SpriteUpdated;
        _vm.Display.OnDisplayCleared += ClearDisplay;
        _vm.SoundTimer.OnStart += (sender, e) => { _beeper.Start(); };
        _vm.SoundTimer.OnElapsed += (sender, e) => { _beeper.Stop(); };

        base.OnInitialized();
    } 

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await _keyDownDiv.FocusAsync();
            _2dContext = await _canvas.CreateCanvas2DAsync();

            ClearDisplay();

            var bytes = await Http.GetByteArrayAsync("pong.rom");

            _vm.Load(bytes);
            _vm.Run(ClockMode.Timer, 1);

        }
    }

    private async void ClearDisplay(object sender = null, EventArgs e = null)
    {
        await InvokeAsync(async () =>
        {
            await _2dContext.BeginBatchAsync();
            await _2dContext.SetFillStyleAsync("yellow");
            await _2dContext.FillRectAsync(0, 0, 640, 320);
            await _2dContext.EndBatchAsync();
        });
    }

    private async void SpriteUpdated(object sender, SpriteInfo spriteInfo)
{
        await _2dContext.BeginBatchAsync();
        bool[,] pixels = spriteInfo.Pixels;
        int xExtent = pixels.GetLength(0);
        int yExtent = pixels.GetLength(1);
        int magnification = 10;

        for (int y = 0; y < yExtent; y++)
        {
            for (int x = 0; x < xExtent; x++)
            {
                bool on = pixels[x, y];
                int rectX = magnification * (spriteInfo.X + x);
                int rectY = magnification * (spriteInfo.Y + y);

                await _2dContext.SetFillStyleAsync(on ? "black" : "yellow");
                await _2dContext.FillRectAsync(rectX, rectY, magnification, magnification);
            }
        }
        await _2dContext.EndBatchAsync();    
    }

    private void KeyDown(KeyboardEventArgs e)
    {
        try
        {
            _keypad.KeyDown(e.Key.ToUpper());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void KeyUp(KeyboardEventArgs e)
    {
        try
        {
            _keypad.KeyUp(e.Key.ToUpper());
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void KeyPress(KeyboardEventArgs e) { }
}