@page "/chip-8"
@using System.Reflection.Emit
@using Blazor.Extensions
@using Blazor.Extensions.Canvas.Canvas2D
@using CHIP_8_Virtual_Machine
@inject IJSRuntime JS
@inject HttpClient Http

<div tabindex="0" @ref="_keyDownDiv" @onkeydown="KeyDown" @onkeyup="KeyUp" @onkeypress="KeyPress">

    <h3>Canvas for Chip-8</h3>

    <BECanvas @ref="_canvas" Width=640 Height=320></BECanvas>

    <p>@KeypadState</p>

</div>

@code {
    private VM _vm;
    private Keypad _keypad = new();
    private ElementReference _keyDownDiv;
    private BECanvasComponent _canvas;
    private Canvas2DContext _2dContext;

    public string KeypadState => _keypad.ToString();

    protected  override void OnInitialized()
    {
        _vm = new VM();
        _vm.Display.OnDisplayUpdated += DisplayUpdated;
        Task.Run(async () =>
        {
            try
            {
            var bytes=await Http.GetByteArrayAsync("pong.rom");
             _vm.Load(bytes);
             _vm.Run(false);
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
         
        });

        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            byte[] sprite = new byte[] { 0xFF, 0xFF, 0xFF, 0xFF };
            _2dContext = await _canvas.CreateCanvas2DAsync();
/*
            for (int i = 10; i < 20; i++)
            {
                if (i > 10)
                {
                    _vm.Display.DisplayChar(i-1, i-1, '0');
                    //_vm.Display.DisplaySprite(i-1, i-1, sprite); // clear the previous displayed sprite
                }
                _vm.Display.DisplayChar(i, i, '0');
                //_vm.Display.DisplaySprite(i, i, sprite);
                await Task.Delay(TimeSpan.FromMilliseconds(20));
            }
*/
            await _keyDownDiv.FocusAsync();
        }
    }

    private async void DisplayUpdated(object sender, bool[,] pixels)
    {
        await _2dContext.BeginBatchAsync();
        await _2dContext.SetFillStyleAsync("white");
        await _2dContext.FillRectAsync(0, 0, 640, 320);

        int xExtent = pixels.GetLength(0);
        int yExtent = pixels.GetLength(1);
        int magnification = 10;

        for (int y = 0; y < yExtent; y++)
        {
            for (int x = 0; x < xExtent; x++)
            {
                bool on = pixels[x, y];
                int rectX = magnification * x;
                int rectY = magnification * y;

                await _2dContext.SetFillStyleAsync(on ? "black" : "white");
                await _2dContext.FillRectAsync(rectX, rectY, magnification, magnification);
                StateHasChanged();
            }
        }
        await _2dContext.EndBatchAsync();
    }

    private void KeyDown(KeyboardEventArgs e)
    {
        try
        {
            _keypad.WindowsKeyDown(e.Key.ToUpper());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void KeyUp(KeyboardEventArgs e)
    {
        try
        {
            _keypad.WindowsKeyUp(e.Key.ToUpper());
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private void KeyPress(KeyboardEventArgs e) { }
}